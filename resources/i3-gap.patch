diff --git a/include/render.h b/include/render.h
index 1794b51..32dfc1c 100644
--- a/include/render.h
+++ b/include/render.h
@@ -18,7 +18,7 @@
  * updated in X11.
  *
  */
-void render_con(Con *con, bool render_fullscreen);
+void render_con(Con *con, bool render_fullscreen, bool already_inset);
 
 /*
  * Returns the height for the decorations
diff --git a/src/commands.c b/src/commands.c
index 73db280..aa3ad81 100644
--- a/src/commands.c
+++ b/src/commands.c
@@ -922,7 +922,7 @@ void cmd_append_layout(I3_CMD, char *path) {
     // is not executed yet and will be batched with append_layout’s
     // needs_tree_render after the parser finished. We should check if that is
     // necessary at all.
-    render_con(croot, false);
+    render_con(croot, false, true);
 
     restore_open_placeholder_windows(parent);
 
diff --git a/src/floating.c b/src/floating.c
index 7a8df50..99686c0 100644
--- a/src/floating.c
+++ b/src/floating.c
@@ -290,8 +290,8 @@ void floating_enable(Con *con, bool automatic) {
     TAILQ_INSERT_TAIL(&(nc->focus_head), con, focused);
 
     /* render the cons to get initial window_rect correct */
-    render_con(nc, false);
-    render_con(con, false);
+    render_con(nc, false, true);
+    render_con(con, false, true);
 
     if (set_focus)
         con_focus(con);
@@ -419,7 +419,7 @@ DRAGGING_CB(drag_window_callback) {
     con->rect.x = old_rect->x + (new_x - event->root_x);
     con->rect.y = old_rect->y + (new_y - event->root_y);
 
-    render_con(con, false);
+    render_con(con, false, true);
     x_push_node(con);
     xcb_flush(conn);
 
diff --git a/src/manage.c b/src/manage.c
index a7002bf..f7c1e96 100644
--- a/src/manage.c
+++ b/src/manage.c
@@ -498,13 +498,13 @@ void manage_window(xcb_window_t window, xcb_get_window_attributes_cookie_t cooki
          * workspace at all. However, just calling render_con() on the
          * workspace isn’t enough either — it needs the rect. */
         ws->rect = ws->parent->rect;
-        render_con(ws, true);
+        render_con(ws, true, false);
         /* Disable setting focus, otherwise we’d move focus to an invisible
          * workspace, which we generally prevent (e.g. in
          * con_move_to_workspace). */
         set_focus = false;
     }
-    render_con(croot, false);
+    render_con(croot, false, true);
 
     /* Send an event about window creation */
     ipc_send_window_event("new", nc);
diff --git a/src/randr.c b/src/randr.c
index 0755c0d..1e65344 100644
--- a/src/randr.c
+++ b/src/randr.c
@@ -397,7 +397,7 @@ void init_ws_for_output(Output *output, Con *content) {
          * Then, we need to work with the "content" container, since we cannot
          * be sure that the workspace itself was rendered at all (in case it’s
          * invisible, it won’t be rendered). */
-        render_con(workspace_out, false);
+        render_con(workspace_out, false, true);
         Con *ws_out_content = output_get_content(workspace_out);
 
         Con *floating_con;
diff --git a/src/render.c b/src/render.c
index 38a4d78..3401f8c 100644
--- a/src/render.c
+++ b/src/render.c
@@ -12,6 +12,7 @@
  */
 #include "all.h"
 
+#define GAP_SIZE 4 
 /* change this to 'true' if you want to have additional borders around every
  * container (for debugging purposes) */
 static bool show_debug_borders = false;
@@ -71,7 +72,7 @@ static void render_l_output(Con *con) {
     if (fullscreen) {
         fullscreen->rect = con->rect;
         x_raise_con(fullscreen);
-        render_con(fullscreen, true);
+        render_con(fullscreen, true, false);
         return;
     }
 
@@ -111,7 +112,7 @@ static void render_l_output(Con *con) {
         DLOG("child at (%d, %d) with (%d x %d)\n",
              child->rect.x, child->rect.y, child->rect.width, child->rect.height);
         x_raise_con(child);
-        render_con(child, false);
+        render_con(child, false, child->type == CT_DOCKAREA);
     }
 }
 
@@ -123,7 +124,7 @@ static void render_l_output(Con *con) {
  * updated in X11.
  *
  */
-void render_con(Con *con, bool render_fullscreen) {
+void render_con(Con *con, bool render_fullscreen, bool already_inset) {
     int children = con_num_children(con);
     DLOG("Rendering %snode %p / %s / layout %d / children %d\n",
          (render_fullscreen ? "fullscreen " : ""), con, con->name, con->layout,
@@ -142,6 +143,25 @@ void render_con(Con *con, bool render_fullscreen) {
         rect.height -= 2 * 2;
     }
 
+    bool should_inset = ((con_is_leaf(con) ||
+                (children > 0 &&
+                 (con->layout == L_STACKED ||
+                  con->layout == L_TABBED))) &&
+            con->type != CT_FLOATING_CON &&
+            con->type != CT_WORKSPACE);
+    if ((!already_inset && should_inset)) {
+        Rect inset = (Rect) {GAP_SIZE, GAP_SIZE, GAP_SIZE * -2, GAP_SIZE * -2};
+        rect = rect_add(rect, inset);
+        if (!render_fullscreen) {
+            con->rect = rect_add(con->rect, inset);
+            if (con->window) {
+                con->window_rect = rect_add(con->window_rect, inset);
+            }
+        }
+        inset.height = GAP_SIZE * -1;
+        con->deco_rect = rect_add(con->deco_rect, inset);
+    }
+
     int x = rect.x;
     int y = rect.y;
 
@@ -209,7 +229,7 @@ void render_con(Con *con, bool render_fullscreen) {
     if (fullscreen) {
         fullscreen->rect = rect;
         x_raise_con(fullscreen);
-        render_con(fullscreen, true);
+        render_con(fullscreen, true, false);
         return;
     }
 
@@ -248,7 +268,7 @@ void render_con(Con *con, bool render_fullscreen) {
     } else if (con->type == CT_ROOT) {
         Con *output;
         TAILQ_FOREACH (output, &(con->nodes_head), nodes) {
-            render_con(output, false);
+            render_con(output, false, false);
         }
 
         /* We need to render floating windows after rendering all outputs’
@@ -314,7 +334,7 @@ void render_con(Con *con, bool render_fullscreen) {
                 DLOG("floating child at (%d,%d) with %d x %d\n",
                      child->rect.x, child->rect.y, child->rect.width, child->rect.height);
                 x_raise_con(child);
-                render_con(child, false);
+                render_con(child, false, true);
             }
         }
 
@@ -422,7 +442,7 @@ void render_con(Con *con, bool render_fullscreen) {
             DLOG("child at (%d, %d) with (%d x %d)\n",
                  child->rect.x, child->rect.y, child->rect.width, child->rect.height);
             x_raise_con(child);
-            render_con(child, false);
+            render_con(child, false, should_inset || already_inset);
             i++;
         }
 
@@ -435,7 +455,7 @@ void render_con(Con *con, bool render_fullscreen) {
              * that we have a non-leaf-container inside the stack. In that
              * case, the children of the non-leaf-container need to be raised
              * aswell. */
-                render_con(child, false);
+                render_con(child, false, true);
             }
 
             if (children != 1)
diff --git a/src/tree.c b/src/tree.c
index da73e14..d31291b 100644
--- a/src/tree.c
+++ b/src/tree.c
@@ -514,7 +514,7 @@ void tree_render(void) {
     mark_unmapped(croot);
     croot->mapped = true;
 
-    render_con(croot, false);
+    render_con(croot, false, true);
 
     x_push_changes(croot);
     DLOG("-- END RENDERING --\n");
